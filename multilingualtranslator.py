# -*- coding: utf-8 -*-
"""MultiLingualTranslator.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1ejKLEIBPW0xsW1NiwD1vJszAgWps_4n8
"""

!pip install transformers sentencepiece gtts ipywidgets
!pip install SpeechRecognition pydub

from transformers import MarianMTModel, MarianTokenizer
from gtts import gTTS
import speech_recognition as sr
from pydub import AudioSegment
from IPython.display import Audio, display, clear_output
from google.colab import files
import ipywidgets as widgets
import os
import warnings
warnings.filterwarnings("ignore")

language_code_map = {
    'English':'en',
    'French':'fr',
    'German':'de',
    'Spanish':'es',
    'Hindi':'hi',
    'Bengali':'bn',
    'Russian':'ru',
    'Arabic':'ar',
    'Portuguese':'pt',
    'Italian':'it',
    'Japanese':'ja',
    'Chinese':'zh',
    'Korean':'ko'
}

model_name_map = {
    ('en', 'fr'):'Helsinki-NLP/opus-mt-en-fr',
    ('en', 'de'):'Helsinki-NLP/opus-mt-en-de',
    ('en', 'es'):'Helsinki-NLP/opus-mt-en-es',
    ('fr', 'en'):'Helsinki-NLP/opus-mt-fr-en',
    ('de', 'en'):'Helsinki-NLP/opus-mt-de-en',
    ('es', 'en'):'Helsinki-NLP/opus-mt-es-en',
    ('hi', 'en'):'Helsinki-NLP/opus-mt-hi-en',
    ('bn', 'en'):'Helsinki-NLP/opus-mt-bn-en',
    ('ru', 'en'):'Helsinki-NLP/opus-mt-ru-en',
    ('ar', 'en'):'Helsinki-NLP/opus-mt-ar-en',
    ('pt', 'en'):'Helsinki-NLP/opus-mt-pt-en',
    ('it', 'en'):'Helsinki-NLP/opus-mt-it-en',
    ('ja', 'en'):'Helsinki-NLP/opus-mt-ja-en',
    ('zh', 'en'):'Helsinki-NLP/opus-mt-zh-en',
    ('ko', 'en'):'Helsinki-NLP/opus-mt-ko-en',
    ('en', 'hi'):'Helsinki-NLP/opus-mt-en-hi',
    ('en', 'bn'):'Helsinki-NLP/opus-mt-en-bn',
    ('en', 'ru'):'Helsinki-NLP/opus-mt-en-ru',
    ('en', 'ar'):'Helsinki-NLP/opus-mt-en-ar',
    ('en', 'pt'):'Helsinki-NLP/opus-mt-en-pt',
    ('en', 'it'):'Helsinki-NLP/opus-mt-en-it',
    ('en', 'ja'):'Helsinki-NLP/opus-mt-en-ja',
    ('en', 'zh'):'Helsinki-NLP/opus-mt-en-zh',
    ('en', 'ko'):'Helsinki-NLP/opus-mt-en-ko'

}

def translate_text(text, src_lang, tgt_lang):
  """Translate text using MarianMT models"""
  lang_pair = (src_lang, tgt_lang)
  if lang_pair not in model_name_map:
    raise ValueError(f"Unsupported language pair: {src_lang}->{tgt_lang}")
  model_name = model_name_map[lang_pair]
  tokenizer = MarianTokenizer.from_pretrained(model_name)
  model = MarianMTModel.from_pretrained(model_name)
  inputs = tokenizer(text, return_tensors="pt", padding=True, truncation=True, max_length=512)
  translated = model.generate(**inputs)
  return tokenizer.decode(translated[0], skip_special_tokens=True)

def speak_text(text, lang_code, speed=1):
  """Convert text to speech with speed control"""
  try:
    tts = gTTS(text=text, lang=lang_code, slow=True if speed == 2 else False)
    audio_path = "output.mp3"
    tts.save(audio_path)
    display(Audio(audio_path, autoplay=True))
    display(widgets.Button(description="Download Audio",button_style='success', on_click=lambda _: files.download(audio_path)))
  except Exception as e:
    print(f"TTS Error: {str(e)}")

def recognize_speech(audio_file):
  """Convert speech to text using Google Speech Recognition"""
  recognizer = sr.Recognizer()
  if audio_file.endswith('.mp3'):
    audio = AudioSegment.from_mp3(audio_file)
    wav_file = audio_file.replace('.mp3', '.wav')
    audio.export(wav_file, format='wav')
  else:
    wav_file = audio_file
  try:
    with sr.AudioFile(wav_file) as source:
      audio_data = recognizer.record(source)
      return recognizer.recognize_google(audio_data)
  except Exception as e:
    print(f"Recognition Error: {str(e)}")
    return None

source_dropdown = widgets.Dropdown(options=list(language_code_map.keys()), value='English', description='Source Language:', style = {'description_width':'initial'} )
target_dropdown = widgets.Dropdown(options=list(language_code_map.keys()), value='French', description='Target Language:', style = {'description_width':'initial'} )

speed_slider = widgets.IntSlider(value=1, min=0, max=5, step=1, description='Speed:', style = {'description_width':'initial'} )

from sys import executable
input_selector = widgets.RadioButtons(options=['Text Input', 'Voice Upload'], value='Text Input', description='Input Method:')
text_input = widgets.Textarea(placeholder='Enter text to translate...', layout=widgets.Layout(width='80%', height='100px'))
file_upload = widgets.FileUpload(accept='.mp3, .wav', multiple=False, description = 'Upload Audio:')
execute_button = widgets.Button(description='Translate & Speak', button_style='success', icon = 'play')
output_area = widgets.Output()

def run_translator():
  output_text = widgets.Output() # Initialize the output widget
  display(widgets.HBox([source_dropdown, target_dropdown, speed_slider]))
  display(input_selector)
  if input_selector.value == 'Text Input':
    text_input = widgets.Textarea(placeholder="Enter text:")
    display(text_input)
    text = text_input.value
  else:
    upload_button = widgets.FileUpload(accept='.mp3, .wav')
    display(upload_button)

  def on_execute(b):
    with output_text:
      clear_output()
    src_lang = language_code_map[source_dropdown.value]
    tgt_lang = language_code_map[target_dropdown.value]
    try:
      if input_selector.value == 'Text Input':
        text = text_input.value
      else:
        print("Speech recognition from file upload is not yet fully implemented.")
        return
      if not text:
        print("Please enter text or upload an audio file.")

      translated = translate_text(text, src_lang, tgt_lang)
      print(f"Translation: {translated}")
      speak_text(translated, tgt_lang, speed_slider.value) # Corrected variable name

    except Exception as e:
      print(f"Error: {str(e)}")
  execute_button = widgets.Button(description='Translate & Speak')
  execute_button.on_click(on_execute)
  display(execute_button, output_text) # Display the output widget

run_translator() # Call the function to display the widgets

from transformers import pipeline

translation_pipelines = {}
def get_translator(src, tgt):
  key = f"{src}-{tgt}"
  if key not in translation_pipelines:
    model_name = model_name_map[(src, tgt)]
    translation_pipelines[key] = pipeline("translation", model=model_name, device=0 if torch.cuda.is_available() else -1)
  return translation_pipelines[key]

def batch_translate(texts, src_lang, tgt_lang):
    translator = get_translator(src_lang, tgt_lang)
    return [out['translation_text']for out in translator(texts)]

def safe_translate(text, src, tgt):
    try:
        if len(text) > 5000:
            return "Error: Text too long (max 5000 chars)"
        if src == tgt:
            return text
        if (src, tgt) not in model_name_map:
            return "Error: Unsupported language pair"
        return translate_text(text, src, tgt)
    except Exception as e:
        return f"Translation Error: {str(e)}"

def on_upload_change(change):
  """Handle file upload changes"""
  if file_upload.value:
    with output_area:
      clear_output()
      print("Processing audio file...")
      audio_file = next(iter(file_upload.value))
      text = recognize_speech(audio_file['name'])
      if text:
        text_input.value = text

def on_execute(b):
  """Main translation function"""
  with output_area:
    clear_output()
    src_lang = language_code_map[source_dropdown.value]
    tgt_lang = language_code_map[target_dropdown.value]
    text = text_input.value.strip()
    if not text:
      print("Please enter text to translate")
      return
    try:
      display(widgets.HTML("<i>Translating...</i>"))
      translated = translate_text(text, src_lang, tgt_lang)
      display(widgets.HTML(
          f"<h3>Translation ({target_dropdown.value}):</h3>"
          f"<p style='font-size:16px'>{translated}</p>"
          ))
      speak_text(translated, tgt_lang, speed_slider.value)
    except Exception as e:
      print(f"Error: {str(e)}")

file_upload.observe(on_upload_change, names='value')
execute_button.on_click(on_execute)

def create_ui():
  """Create responsive UI layout"""
  input_box =  widgets.VBox([text_input])
  def update_input(change):
    if change['new'] == 'Text Input':
      input_box.children = [text_input]
    else:
      input_box.children = [file_upload]
  input_selector.observe(update_input, names='value')

  app = widgets.VBox([
      widgets.HTML("<h1 style= 'text-align:center'>Multilingual Translator</h1>"),
      widgets.HBox([source_dropdown,
                    target_dropdown,
                    speed_slider,
                    input_selector
                    ], layout=widgets.Layout(width='30%')),
      input_box,
      execute_button,
      output_area
  ], layout=widgets.Layout(
      width='90%',
      margin='0 auto',
      border='1px solid #eee',
      padding='20px'
      ))
  return app

display(create_ui())